        x_bin_edges = 0:x_bins_width:100*position.linear(track_id).length; % forces x_bins to be from 0 to 200cm
        x_bin_centres = [(x_bin_edges(2)-x_bins_width/2):x_bins_width:(x_bin_edges(end-1)+x_bins_width/2)];
        x_bins = 0:x_bins_width:(100*position.linear(track_id).length); %bin position

        % Time spent at each x_bin (speed filtered)
        x_hist = time_bin_width.*histcounts(position.linear(track_id).linear(find(position.t>place_fields.track(track_id).time_window(1) &...
                 position.t<place_fields.track(track_id).time_window(2) & position_speed>parameters.speed_threshold_laps...
                 & position_speed<parameters.speed_threshold_max)),x_bin_edges); % Changed bin_centre to bin_edges



        for j = 1 : max(clusters.id_conversion(:,1))
            
            % Number of spikes per bin within time window (speed filtered)
            place_fields.track(track_id).spike_hist{j} = histcounts(position_during_spike(find(clusters.spike_id==j & ...
                                                        clusters.spike_times>place_fields.track(track_id).time_window(1) & ...
                                                        clusters.spike_times<place_fields.track(track_id).time_window(2) & ...
                                                        speed_during_spike>parameters.speed_threshold_laps &...
                                                        speed_during_spike<parameters.speed_threshold_max)),x_bin_edges); % Changed bin_centre to bin_edges

            place_fields.track(track_id).raw{j} = place_fields.track(track_id).spike_hist{j}./x_hist; % place field calculation
            place_fields.track(track_id).raw{j}(find(isnan(place_fields.track(track_id).raw{j})==1))=0;
          
            % zero bins with 0 dwell time, but make sure no spikes occurred
            non_visited_bins = find(x_hist==0);
            if sum(place_fields.track(track_id).spike_hist{j}(non_visited_bins))>0
                disp('ERROR: x_hist is zero, but spike histogram is not');
            else
                place_fields.track(track_id).raw{j}(non_visited_bins)= 0;
            end
            place_fields.track(track_id).non_visited_bins = non_visited_bins; %NaNs that have been replaced by O
            
            % Create smoothing filter (gamma)
            if x_bins_width== parameters.x_bins_width_bayesian
                w= [1 1];  %moving average filter of 2 sample, will be become a filter of [0.25 0.5 0.25] with filtfilt
            else
                w= gausswin(parameters.place_field_smoothing);
            end
            w = w./sum(w); %make sure smoothing filter sums to 1
            
            % Get place field information
            place_fields.track(track_id).smooth{j}         = filtfilt(w,1,place_fields.track(track_id).raw{j}); %smooth pl field
            place_fields.track(track_id).centre_of_mass(j) = sum(place_fields.track(track_id).smooth{j}.*x_bin_centres/sum(place_fields.track(track_id).smooth{j}));  %averaged center
            [place_fields.track(track_id).peak(j) , index] = max(place_fields.track(track_id).smooth{j}); %peak of smoothed place field and index of peak (center)
            if place_fields.track(track_id).peak(j) ~=0
                if length(index)>1 % very rare exception where you have multiple peaks of same height....
                    index= index(1);
                end
                place_fields.track(track_id).centre(j) = x_bin_centres(index);
                
            else
                place_fields.track(track_id).centre(j) = NaN;
            end
            place_fields.track(track_id).raw_peak(j)          = max(place_fields.track(track_id).raw{j}); % raw pl field peak
            place_fields.track(track_id).mean_rate_session(j) = length(find(clusters.spike_id==j))/(position.t(end)-position.t(1)); %mean firing rate
            place_fields.track(track_id).mean_rate_track(j)   = sum(place_fields.track(track_id).spike_hist{j})/(place_fields.track(track_id).time_window(2)-place_fields.track(track_id).time_window(1));
            if place_fields.track(track_id).peak(j) ~=0
                place_fields.track(track_id).half_max_width(j) = x_bins_width*half_max_width(place_fields.track(track_id).smooth{j}); %finds half width of smoothed place field (width from y values closest to 50% of peak)
            else
                place_fields.track(track_id).half_max_width(j) = NaN;
            end
        end